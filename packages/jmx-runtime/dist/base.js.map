{"version":3,"file":"base.js","sourceRoot":"./","sources":["base.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,MAAM,CAAC,CAAsB;IACzC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,yBAAyB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;SACrE,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,IAAI,aAAa,IAAI,CAAC,CAAC,KAAK,YAAY,QAAQ,CAAC;SAC3E,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;IACnD,OAAO,CAAC,CAAA;AACZ,CAAC;AAED,MAAM,UAAU,KAAK,CAAC,CAAsB,IAAI,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAA,CAAC,CAAC;AAE9E,MAAM,CAAC,MAAM,eAAe,GAAG,CAAgC,CAAI,EAAE,MAAwD,EAAE,EAAE,CAAC,IAAI,KAAK,CAAC,CAAC,EAAE;IAC3I,GAAG,CAAC,MAAM,EAAE,IAAY,EAAE,QAAQ;QAC9B,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,UAAU,EAAE,CAAC;YACrC,OAAO,UAAmB,GAAG,IAAW;gBAEpC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,CAAA;gBAC7B,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;gBACtC,OAAO,CAAC,CAAA;YACZ,CAAC,CAAA;QACL,CAAC;QACD,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAA;IAC9C,CAAC;CACJ,CAAC,CAAA;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAgC,CAAI,EAAM,EAAE,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,EAAE,6DAA6D,EAAE,IAAI,CAAC,CAAC,CAAA;AACnN,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAgC,OAAe,EAAE,CAAI,EAAM,EAAE,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,EAAE,cAAc,OAAO,2CAA2C,EAAE,IAAI,CAAC,CAAC,CAAA","sourcesContent":["export function rebind(o: Record<string, any>) {\n    Object.entries(Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)))\n        .filter(([name, p]) => name != 'constructor' && p.value instanceof Function)\n        .forEach(([name]) => o[name] = o[name].bind(o))\n    return o\n}\n\nexport function mount(o: Record<string, any>) { Object.assign(globalThis, o) }\n\nexport const loggedmethodsex = <T extends Record<string, any>>(o: T, logger: (name: string, args: any[], result: any) => void) => new Proxy(o, {\n    get(target, name: string, receiver) {\n        if (typeof target[name] === \"function\") {\n            return function (this: T, ...args: any[]) {\n\n                logger(name, args, undefined)\n                let r = target[name].apply(this, args)\n                return r\n            }\n        }\n        return Reflect.get(target, name, receiver)\n    },\n})\n\nexport const loggedmethods = <T extends Record<string, any>>(o: T ): T => loggedmethodsex(o, (name, args, result) => console.log(\"%c\" + name, \"background:#585059;color:white;padding:2px;font-weight:bold\", args))\nexport const loggedmethodscolored = <T extends Record<string, any>>(bgcolor: string, o: T ): T => loggedmethodsex(o, (name, args, result) => console.log(\"%c\" + name, `background:${bgcolor};color:white;padding:2px;font-weight:bold`, args))\n"]}