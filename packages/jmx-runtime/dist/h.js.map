{"version":3,"file":"h.js","sourceRoot":"./","sources":["h.ts"],"names":[],"mappings":"AAkFA,MAAM,UAAU,GAAG;IACf,MAAM,2BAA2B,CAAA;AACrC,CAAC;AACD,MAAM,UAAU,IAAI;IAChB,MAAM,2BAA2B,CAAA;AACrC,CAAC","sourcesContent":["// jmx internal types - hopst\r\n// the following types describe the js expression we get from tsx after conversion be our jmx plugin\r\n// they can be useful for users as well, components might return them.\r\n\r\ntype Func<T> = () => T\r\nexport type Expr<T> = T | Func<T>\r\n\r\nexport type Props = Record<string, any>\r\n\r\nexport type FComponent = (props: Props | undefined, children?: ChildrenH) => HElement // show an example for usage of children\r\n\r\nexport type FComponentT<P> = (pcn: P, cn?: Children) => H | void\r\n\r\nexport interface IClassComponent {\r\n    element: Node\r\n    props?: Record<string, any>\r\n    view(): H\r\n    update(uc: IUpdateContext): boolean | void\r\n    mounted?(): void\r\n}\r\n\r\ninterface CComponent {\r\n    new (props: any): IClassComponent // while a real component expresses its interface via props pass to the ctor, internally we assign props after construction with new()\r\n}\r\n\r\nexport type ChildrenH = (H | undefined)[]\r\nexport type Children = Expr<ChildrenH>\r\n\r\ntype HText =\r\n    | string // text node\r\n    | number // text node\r\n    | boolean // do not allow boolean, that\r\n\r\nexport type HFragment = {\r\n    cn: Children\r\n}\r\n\r\nexport type HElement = {\r\n    tag: string\r\n    p?: Expr<Props>\r\n    cn: Children\r\n    i?: any\r\n}\r\n\r\ntype HCompFun = {\r\n    tag: FComponent\r\n    p?: Expr<Props>\r\n    cn?: Children\r\n}\r\n\r\nexport type HCompClass = {\r\n    tag: CComponent\r\n    p?: Expr<Props>\r\n    cn: Children\r\n    i: IClassComponent\r\n}\r\n\r\nexport type HComp = HCompFun | HCompClass\r\n\r\nexport type H = // a hyperscript atom that describes a ...\r\n\r\n        | HText\r\n        | HElement // a tag, like p, div with attributes and children\r\n        | HComp // a dynamic component computing any other HNode\r\n        | HFragment\r\n\r\ndeclare global {\r\n    interface Node {\r\n        h?: HElement | HCompFun | HCompClass\r\n    }\r\n    export interface IUpdateContext {\r\n        patchElementOnly?: boolean\r\n        replace?: boolean\r\n    }\r\n\r\n    export interface Window {\r\n        jmx?: {\r\n            getnamespace: (tag: string) => string | undefined\r\n        }\r\n    }\r\n}\r\n\r\nexport function jsx(): HElement {\r\n    throw 'jmx plugin not configured'\r\n} // dumy function for app code - jmx-plugin removes calls to this function, minifyer then removes it\r\nexport function jsxf(): HElement {\r\n    throw 'jmx plugin not configured'\r\n} // dumy function for app code - jmx-plugin removes calls to this function, minifyer then removes it\r\n"]}