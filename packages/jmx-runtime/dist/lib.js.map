{"version":3,"file":"lib.js","sourceRoot":"./","sources":["lib.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAA;AAIlC,MAAM,CAAC,MAAM,IAAI,GAAG,CAAC,EAAE,IAAI,EAAqB,EAAE,EAAY,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AAE1F,MAAM,OAAgB,OAAO;IAON;IAJnB,OAAO,CAAc;IAIrB,YAAmB,KAAQ;QAAR,UAAK,GAAL,KAAK,CAAG;IAAI,CAAC;IAGhC,OAAO,KAAK,CAAC;IACb,MAAM,CAAC,EAAmB,IAAoB,CAAC;IAI/C,UAAU,KAAK,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA,CAAC,CAAC;CAC5C;AAED,MAAM,UAAU,EAAE,CAAC,GAAG,cAAgC;IAClD,OAAO,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AACjG,CAAC","sourcesContent":["import { Props, IClassComponent, H, FComponentT, Children } from 'h'\r\nimport { updateview } from './jmx'\r\n\r\nexport type DeepReadonly<T> = { readonly [K in keyof T]: T[K] extends Record<string, unknown> ? DeepReadonly<T[K]> : T[K]; }\r\n\r\nexport const When = ({ cond }: { cond: boolean }, cn: Children) => cond ? { cn } : void 0;\r\n\r\nexport abstract class JMXComp<P extends Props = {}> implements IClassComponent {\r\n\r\n    // assigned by jmx framework\r\n    element!: HTMLElement\r\n\r\n    // we provide this ctor for jsx which uses ctor arguments as properties of class components.\r\n    // at runtime, we pass the props directly\r\n    constructor(public props: P) { }\r\n\r\n    // overrides\r\n    mounted() { }\r\n    update(uc?: IUpdateContext): boolean | void { }\r\n    abstract view(): H\r\n\r\n    // utility: updates the component's view\r\n    updateview() { updateview(this.element) }\r\n}\r\n\r\nexport function cc(...namesOrObjects: (string | any)[]): string {\r\n    return namesOrObjects.flatMap(n => (n.trim ? n : Object.keys(n).filter(k => n[k]))).join(' ') // n.trim distinguishes strings from objects\r\n}"]}