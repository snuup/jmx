{"version":3,"file":"lib.js","sourceRoot":"./","sources":["lib.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAA;AAIlC,MAAM,CAAC,MAAM,IAAI,GAAG,CAAC,EAAE,IAAI,EAAqB,EAAE,EAAY,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AAE1F,MAAM,OAAgB,OAAO;IAON;IAJnB,OAAO,CAAc;IAIrB,YAAmB,KAAQ;QAAR,UAAK,GAAL,KAAK,CAAG;IAAI,CAAC;IAGhC,OAAO,KAAK,CAAC;IACb,MAAM,CAAC,EAAmB,IAAoB,CAAC;IAI/C,UAAU,KAAK,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA,CAAC,CAAC;IACzC,IAAI,SAAS,KAAa,OAAO,IAAI,CAAC,OAAc,CAAA,CAAC,CAAC;CACzD;AAED,MAAM,UAAU,EAAE,CAAC,GAAG,cAAgC;IAClD,OAAO,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AACjG,CAAC","sourcesContent":["import { Props, IClassComponent, H, FComponentT, Children } from 'h'\nimport { updateview } from './jmx'\n\nexport type DeepReadonly<T> = { readonly [K in keyof T]: T[K] extends Record<string, unknown> ? DeepReadonly<T[K]> : T[K]; }\n\nexport const When = ({ cond }: { cond: boolean }, cn: Children) => cond ? { cn } : void 0;\n\nexport abstract class JMXComp<P extends Props = {}> implements IClassComponent {\n\n    // assigned by jmx framework\n    element!: HTMLElement\n\n    // we provide this ctor for jsx which uses ctor arguments as properties of class components.\n    // at runtime, we pass the props directly\n    constructor(public props: P) { }\n\n    // overrides\n    mounted() { }\n    update(uc?: IUpdateContext): boolean | void { }\n    abstract view(): H\n\n    // utility: updates the component's view\n    updateview() { updateview(this.element) }\n    get ismounted():boolean { return this.element as any }\n}\n\nexport function cc(...namesOrObjects: (string | any)[]): string {\n    return namesOrObjects.flatMap(n => (n.trim ? n : Object.keys(n).filter(k => n[k]))).join(' ') // n.trim distinguishes strings from objects\n}"]}